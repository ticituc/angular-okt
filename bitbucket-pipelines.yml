options:
    docker: true
definitions:
        ##sonar: ~/.sonar/cache
    #services:
    #    docker:
    #        memory: 2048 #increasing docker service memory
    steps:
        - step: &create-version
              name: Versioning
              script:
                  - cp .env.dev  .env
                  - chmod +x ./go-change-logger
                  - "./go-change-logger"
              artifacts:
                  - .env
                  - currentVersion
                  - task-definition.json
        - step: &build-app
              name: Build Application
              image: node:18
              caches:
                  - node
              script:
                  - npm install
                  #- mv .env.ecs .env
                  - npm run build
                  - rm -fr node_modules
              artifacts:
                  - .nuxt/**
                  - .output/**
        - step: &build-image-and-publish
              name: Build Node Image
              services:
                  - docker
              caches:
                  - docker
              script:
                  - version=`cat currentVersion`
                  #- mv .env.ecs .env
                  - echo $version
                  - docker build -t $DOCKER_IMAGE_GROUP/node .  
                  - docker run -d --name intermediate-image $DOCKER_IMAGE_GROUP/node
                  - docker commit intermediate-image $DOCKER_IMAGE_GROUP/node
                  - pipe: atlassian/aws-ecr-push-image:1.5.0
                    variables:
                        AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID # Optional if already defined in the context.
                        AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY # Optional if already defined in the context.
                        AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION # Optional if already defined in the context.
                        IMAGE_NAME: $DOCKER_IMAGE_GROUP/node
                        DEBUG: "false"
                        TAGS: $version
        - step: &ecs-develop-deploy-step
              name: AWS ECS Deploy
              deployment: Staging
              script:
                  - pipe: atlassian/aws-ecs-deploy:1.6.1
                    variables:
                      AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                      AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                      AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                      CLUSTER_NAME: 'PrizificDevelop'
                      SERVICE_NAME: 'NyeromarkakHive'
                      TASK_DEFINITION: 'task-definition.json'
                      WAIT: 'true'

#Production=======================================================================
        - step: &create-version-prod
              name: Create Version For Production
              script:
                  - cp .env.prod  .env
                  - chmod +x ./go-change-logger
                  - "./go-change-logger --use-lates-tag --prod"
              artifacts:
                  - .env
                  - currentVersion
                  - task-definition-prod.json  
        - step: &ecs-develop-deploy-step-prod
              name: AWS ECS Deploy
              deployment: Production
              script:
                  - pipe: atlassian/aws-ecs-deploy:1.6.1
                    variables:
                      AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                      AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                      AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                      CLUSTER_NAME: 'Prizific'
                      SERVICE_NAME: 'NyeromarkakHive'
                      TASK_DEFINITION: 'task-definition-prod.json'
                      WAIT: 'true'

pipelines:
    branches:
        develop:
            - step: *create-version
            - step: *build-app
            - step: *build-image-and-publish
            - step: *ecs-develop-deploy-step
        master:
            - step: *create-version-prod
            - step: *build-app
            - step: *build-image-and-publish
            - step: *ecs-develop-deploy-step-prod
